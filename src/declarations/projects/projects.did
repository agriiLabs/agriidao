type Vote = 
 record {
   isAccept: bool;
   projectProposalId: text;
   timestamp: Time;
   userId: principal;
 };
type UserId = principal;
type Treasury = 
 record {
   balance: float64;
   projectId: text;
   timestamp: Time;
   totalFunders: int;
   totalIn: float64;
   totalOut: float64;
 };
type Time = int;
type Result = 
 variant {
   err: text;
   ok;
 };
type ProposalStatus = 
 variant {
   Approved;
   Pending;
   Rejected;
 };
type ProjectType = 
 variant {
   AgTech;
   Farm;
   GreenHouse;
   NotSpecified;
   Offtaking;
   Proccessing;
   ProcessingPlant;
   ResearchAndDevelopment;
   SolarMiniGrid;
   Warehouse;
 };
type ProjectTermId = text;
type ProjectTerm = 
 record {
   createdBy: principal;
   duration: int;
   isStart: bool;
   payoutFrequency: int;
   projectId: text;
   projectType: ProjectType;
   rounds: int;
   timestamp: Time;
 };
type ProjectRequest = 
 record {
   coop: principal;
   currency: text;
   description: text;
   duration: int;
   fundingGoal: nat;
   image: opt text;
   location: text;
   name: text;
   owner: principal;
   summary: text;
 };
type ProjectProposalRequest = 
 record {
   coop: principal;
   isAccept: bool;
   projectId: text;
   timestamp: Time;
   userId: principal;
   voteDuration: int;
   voteStart: opt Time;
 };
type ProjectProposalId = text;
type ProjectProposal = 
 record {
   coop: principal;
   id: text;
   isAccept: bool;
   projectId: text;
   timestamp: Time;
   userId: principal;
   voteDuration: int;
   voteStart: opt Time;
 };
type ProjectProjections = 
 record {
   expenses: nat;
   income: nat;
   isStart: bool;
   profit: nat;
   projectId: text;
   royaltyPercentage: nat;
   royaltySplit: nat;
   timestamp: Time;
 };
type ProjectOwner = 
 record {
   entityType: EntityType;
   name: text;
   timestamp: Time;
   userId: principal;
 };
type ProjectIncomeRequest = 
 record {
   amount: nat;
   createdBy: principal;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
   timestamp: Time;
   total: nat;
 };
type ProjectIncomeId = text;
type ProjectIncome = 
 record {
   amount: nat;
   createdBy: principal;
   id: text;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
   timestamp: Time;
   total: nat;
 };
type ProjectId = text;
type ProjectFunderId = text;
type ProjectFunder = 
 record {
   amount: float64;
   id: text;
   projectId: text;
   timestamp: Time;
   userId: principal;
 };
type ProjectFinancials = 
 record {
   expenses: nat;
   income: nat;
   isStart: bool;
   profit: nat;
   projectId: text;
   royaltyPercentage: nat;
   royaltySplit: nat;
   timestamp: Time;
 };
type ProjectExpenseRequest = 
 record {
   amount: nat;
   createdBy: principal;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
   timestamp: Time;
   total: nat;
 };
type ProjectExpenseId = text;
type ProjectExpense = 
 record {
   amount: nat;
   createdBy: principal;
   id: text;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
   timestamp: Time;
   total: nat;
 };
type Project = 
 record {
   coop: principal;
   createdBy: principal;
   currency: text;
   description: text;
   duration: int;
   endDate: opt Time;
   fundingEnd: opt Time;
   fundingGoal: nat;
   fundingStart: opt Time;
   fundingStatus: FundingStatus;
   id: text;
   image: opt text;
   isActive: bool;
   isDelete: bool;
   location: text;
   name: text;
   owner: principal;
   proposalStatus: ProposalStatus;
   startDate: opt Time;
   summary: text;
   timestamp: Time;
 };
type MilestoneId = text;
type Milestone = 
 record {
   approvedBy: opt principal;
   budget: float64;
   completedDate: opt Time;
   description: opt text;
   dueDate: opt Time;
   id: text;
   isComplete: bool;
   isStart: bool;
   projectId: text;
   task1: text;
   task2: opt text;
   task3: opt text;
   timestamp: Time;
 };
type FundingStatus = 
 variant {
   Funded;
   Pending;
   Raising;
   Unfunded;
 };
type EntityType = 
 variant {
   Business;
   Government;
   Individual;
   NGO;
   University;
 };
service : {
  addFinancialsExpense: (ProjectExpenseRequest) -> ();
  addFinancialsIncome: (ProjectIncomeRequest) -> ();
  addMilestone: (Milestone) -> ();
  addProject: (ProjectRequest) -> (Result);
  addProjectFunder: (ProjectFunder) -> ();
  addProjectOwner: (ProjectOwner) -> ();
  addProjectProposal: (ProjectProposalRequest) -> ();
  addProjectTerm: (ProjectTerm) -> ();
  addProjectionExpense: (ProjectExpenseRequest) -> ();
  addProjectionIncome: (ProjectIncomeRequest) -> ();
  addVote: (Vote) -> ();
  getAllProjectOwners: () -> (vec ProjectOwner);
  getAllProjects: () -> (vec Project);
  getEntityTypes: () -> (vec text) query;
  getFinancialsExpenseById: (ProjectExpenseId) -> (ProjectExpense);
  getFinancialsExpensesByProjectId: (ProjectId) -> (vec ProjectExpense);
  getFinancialsIncomeById: (ProjectIncomeId) -> (ProjectIncome);
  getFinancialsIncomesByProjectId: (ProjectId) -> (vec ProjectIncome);
  getMilestoneById: (MilestoneId) -> (Milestone);
  getMilestonesByProjectId: (ProjectId) -> (vec Milestone);
  getProjectById: (ProjectId) -> (Project);
  getProjectFinancialsByProjectId: (ProjectId) -> (ProjectFinancials);
  getProjectFunderById: (ProjectFunderId) -> (ProjectFunder);
  getProjectFundersByProjectId: (ProjectId) -> (vec ProjectFunder);
  getProjectFundersByUserId: (principal) -> (vec ProjectFunder);
  getProjectOwner: () -> (ProjectOwner);
  getProjectProjectionsByProjectId: (ProjectId) -> (ProjectProjections);
  getProjectProposalById: (ProjectProposalId) -> (ProjectProposal);
  getProjectProposalsByProjectId: (ProjectId) -> (vec ProjectProposal);
  getProjectTermById: (ProjectTermId) -> (ProjectTerm);
  getProjectTermsByProjectId: (ProjectId) -> (vec ProjectTerm);
  getProjectionExpenseById: (ProjectExpenseId) -> (ProjectExpense);
  getProjectionExpensesByProjectId: (ProjectId) -> (vec ProjectExpense);
  getProjectionIncomeById: (ProjectIncomeId) -> (ProjectIncome);
  getProjectionIncomesByProjectId: (ProjectId) -> (vec ProjectIncome);
  getProjectsByUserId: (UserId) -> (vec Project);
  getStartProject: (ProjectId) -> (Project) query;
  getTreasuryByProjectId: (ProjectId) -> (Treasury);
  getVoteById: (text) -> (Vote);
  getVotesByUserId: (principal) -> (vec Vote);
  projectOwnerCheck: () -> (bool) query;
  updateFinancialsExpense: (ProjectExpense) -> ();
  updateFinancialsIncome: (ProjectIncome) -> ();
  updateMilestone: (Milestone) -> ();
  updateProject: (Project) -> ();
  updateProjectFinancials: (ProjectFinancials) -> ();
  updateProjectFunder: (ProjectFunder) -> ();
  updateProjectProjections: (ProjectProjections) -> ();
  updateProjectProposal: (ProjectProposal) -> ();
  updateProjectTerm: (ProjectTerm) -> ();
  updateProjectionExpense: (ProjectExpense) -> ();
  updateProjectionIncome: (ProjectIncome) -> ();
  updateTreasury: (Treasury) -> ();
}
