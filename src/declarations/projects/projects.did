type UserId = principal;
type Treasury = 
 record {
   balance: nat;
   projectId: text;
   timestamp: Time;
   totalIn: nat;
   totalOut: nat;
 };
type Time = int;
type Result_2 = 
 variant {
   err: text;
   ok: ProjectExpense;
 };
type Result_1 = 
 variant {
   err: text;
   ok: ProjectIncome;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type ProposalStatus = 
 variant {
   Approved;
   Draft;
   Pending;
   Rejected;
 };
type Projects = 
 service {
   addCommitmentVault: (ProjectId) -> ();
   addFinancialsExpense: (ProjectExpenseRequest) -> ();
   addFinancialsIncome: (ProjectIncomeRequest) -> ();
   addMilestone: (MilestoneRequest) -> ();
   addProject: (ProjectRequest) -> ();
   addProjectFunder: (ProjectFunder) -> ();
   addProjectOwner: (ProjectOwner) -> ();
   addProjectTerm: (ProjectTerm) -> ();
   addProjectionExpense: (ProjectExpenseRequest) -> (Result_2);
   addProjectionIncome: (ProjectIncomeRequest) -> (Result_1);
   getAllProjects: () -> (vec Project);
   getCommitmentVaultByProjectId: (ProjectId) -> (CommitmentVault) query;
   getEntityTypes: () -> (vec text) query;
   getFinancialsExpenseById: (ProjectExpenseId) -> (ProjectExpense);
   getFinancialsExpensesByProjectId: (ProjectId) -> (vec ProjectExpense);
   getFinancialsIncomeById: (ProjectIncomeId) -> (ProjectIncome);
   getFinancialsIncomesByProjectId: (ProjectId) -> (vec ProjectIncome);
   getMilestoneById: (MilestoneId) -> (Milestone);
   getMilestonesByProjectId: (ProjectId) -> (vec Milestone);
   getProjectById: (ProjectId) -> (Project);
   getProjectFinancialsByProjectId: (ProjectId) -> (ProjectFinancials);
   getProjectFunderById: (ProjectFunderId) -> (ProjectFunder);
   getProjectFundersByProjectId: (ProjectId) -> (vec ProjectFunder);
   getProjectFundersByUserId: (principal) -> (vec ProjectFunder);
   getProjectOwner: () -> (ProjectOwner);
   getProjectProjectionsByProjectId: (ProjectId) -> (ProjectProjections);
   getProjectTermById: (ProjectTermId) -> (ProjectTerm);
   getProjectTermsByProjectId: (ProjectId) -> (vec ProjectTerm);
   getProjectTypes: () -> (vec text) query;
   getProjectionExpenseById: (ProjectExpenseId) -> (ProjectExpense);
   getProjectionExpensesByProjectId: (ProjectId) -> (vec ProjectExpense);
   getProjectionIncomeById: (ProjectIncomeId) -> (ProjectIncome);
   getProjectionIncomesByProjectId: (ProjectId) -> (vec ProjectIncome);
   getProjectsByCoop: (text) -> (vec Project) query;
   getProjectsByOwner: (UserId) -> (vec Project);
   getTreasuryByProjectId: (ProjectId) -> (Treasury);
   updateFinancialsExpense: (ProjectExpense) -> ();
   updateFinancialsIncome: (ProjectIncome) -> ();
   updateMilestone: (Milestone) -> ();
   updateProject: (Project) -> ();
   updateProjectFinancials: (ProjectFinancials) -> ();
   updateProjectFunder: (ProjectFunder) -> ();
   updateProjectOwner: (ProjectOwner) -> ();
   updateProjectProjections: (ProjectProjections) -> ();
   updateProjectTerm: (ProjectTerm) -> ();
   updateProjectionExpense: (ProjectExpense) -> ();
   updateProjectionIncome: (ProjectIncome) -> (Result);
   updateTreasury: (Treasury) -> ();
 };
type ProjectType = 
 variant {
   AgTech;
   Farm;
   GreenHouse;
   Offtaking;
   Proccessing;
   ResearchAndDevelopment;
   SolarMiniGrid;
   Warehouse;
 };
type ProjectTermId = text;
type ProjectTerm = 
 record {
   createdBy: principal;
   duration: int;
   payoutFrequency: int;
   projectId: text;
   projectType: ProjectType;
   rounds: int;
   timestamp: Time;
 };
type ProjectRequest = 
 record {
   coop: principal;
   currency: text;
   description: text;
   duration: int;
   image: opt text;
   location: text;
   name: text;
   owner: principal;
   projectType: ProjectType;
   summary: text;
   unitsGoal: nat;
 };
type ProjectProjections = 
 record {
   expenses: nat;
   income: nat;
   profit: nat;
   projectId: text;
   royaltyPercentage: nat;
   royaltySplit: nat;
   timestamp: Time;
 };
type ProjectOwner = 
 record {
   entityType: EntityType;
   name: text;
   timestamp: Time;
   userId: principal;
 };
type ProjectIncomeRequest = 
 record {
   amount: nat;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
 };
type ProjectIncomeId = text;
type ProjectIncome = 
 record {
   amount: nat;
   createdBy: principal;
   id: text;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
   timestamp: Time;
   total: nat;
 };
type ProjectId = text;
type ProjectFunderId = text;
type ProjectFunder = 
 record {
   amount: nat;
   id: text;
   projectId: text;
   timestamp: Time;
   userId: principal;
 };
type ProjectFinancials = 
 record {
   expenses: nat;
   income: nat;
   profit: nat;
   projectId: text;
   royaltyPercentage: nat;
   royaltySplit: nat;
   timestamp: Time;
 };
type ProjectExpenseRequest = 
 record {
   amount: nat;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
 };
type ProjectExpenseId = text;
type ProjectExpense = 
 record {
   amount: nat;
   createdBy: principal;
   id: text;
   item: text;
   projectFinancialsId: opt text;
   projectProjectionsId: opt text;
   quantity: nat;
   timestamp: Time;
   total: nat;
 };
type Project = 
 record {
   coop: principal;
   createdBy: principal;
   currency: text;
   description: text;
   duration: int;
   endDate: opt Time;
   fundingEnd: opt Time;
   fundingStart: opt Time;
   fundingStatus: FundingStatus;
   id: text;
   image: opt text;
   isActive: bool;
   isDelete: bool;
   location: text;
   name: text;
   owner: principal;
   projectType: ProjectType;
   proposalStatus: ProposalStatus;
   startDate: opt Time;
   summary: text;
   timestamp: Time;
   unitsGoal: nat;
   unitsRaised: nat;
 };
type MilestoneStatus = 
 variant {
   Completed;
   Inprogress;
   NotStarted;
 };
type MilestoneRequest = 
 record {
   budget: nat;
   description: text;
   name: text;
   projectId: text;
   task1: text;
   task2: opt text;
   task3: opt text;
   timeframe: nat;
 };
type MilestoneId = text;
type Milestone = 
 record {
   approvedBy: opt principal;
   budget: nat;
   completedDate: opt Time;
   createdBy: principal;
   description: text;
   id: text;
   isComplete: bool;
   milestoneStatus: MilestoneStatus;
   name: text;
   projectId: text;
   task1: text;
   task2: opt text;
   task3: opt text;
   timeframe: nat;
   timestamp: Time;
 };
type FundingStatus = 
 variant {
   Funded;
   Pending;
   Raising;
   Unfunded;
 };
type EnvType = 
 variant {
   local;
   production;
   staging;
 };
type EntityType = 
 variant {
   Business;
   Government;
   Individual;
   NGO;
   University;
 };
type CommitmentVault = 
 record {
   balance: nat;
   projectId: text;
   timestamp: Time;
   totalFunders: int;
   totalIn: nat;
   totalOut: nat;
 };
type CanisterInitArgs = record {env: EnvType;};
service : (CanisterInitArgs) -> Projects
