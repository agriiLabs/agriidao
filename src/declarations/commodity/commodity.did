type Time = int;
type Stats = 
 record {
   total_commodities: nat;
   total_market_location_agents: nat;
   total_market_location_commodities: nat;
   total_market_locations: nat;
   total_market_prices: nat;
 };
type Result_4 = 
 variant {
   err: text;
   ok: Commodity;
 };
type Result_3 = 
 variant {
   err: text;
   ok: MarketLocationAgent;
 };
type Result_2 = 
 variant {
   err: text;
   ok: MarketPrice;
 };
type Result_1 = 
 variant {
   err: text;
   ok: MarketLocationCommodity;
 };
type Result = 
 variant {
   err: text;
   ok: MarketLocation;
 };
type MarketPriceRequest = 
 record {
   currency: text;
   marketLocationCommodityId: text;
   marketLocationId: text;
   price: float64;
   pricePerKg: float64;
   status: record {
             accepted: bool;
             pending: bool;
             rejected: bool;
           };
   unitKg: int;
   userId: text;
 };
type MarketPriceId = text;
type MarketPrice = 
 record {
   createdBy: text;
   currency: text;
   id: text;
   isDelete: bool;
   isPaid: bool;
   marketLocationCommodityId: text;
   marketLocationId: text;
   price: float64;
   pricePerKg: float64;
   status: record {
             accepted: bool;
             pending: bool;
             rejected: bool;
           };
   timeStamp: Time;
   unitKg: int;
   userId: text;
 };
type MarketLocationRequest = 
 record {
   countryId: text;
   name: text;
 };
type MarketLocationCommodityRequest = 
 record {
   commodityId: text;
   marketLocationId: text;
 };
type MarketLocationCommodity = 
 record {
   commodityId: text;
   createdBy: text;
   id: text;
   isDelete: bool;
   marketLocationId: text;
   timeStamp: Time;
 };
type MarketLocationAgentRequest = 
 record {
   marketLocationId: text;
   userId: text;
 };
type MarketLocationAgent = 
 record {
   createdBy: text;
   id: text;
   isDelete: bool;
   marketLocationId: text;
   timeStamp: Time;
   userId: text;
 };
type MarketLocation = 
 record {
   countryId: text;
   createdBy: text;
   id: text;
   isDelete: bool;
   name: text;
   timeStamp: Time;
 };
type GetPagesArgs = 
 record {
   page: nat;
   size: nat;
 };
type EnvType = 
 variant {
   local;
   production;
   staging;
 };
type CommodityRequest = 
 record {
   acCategoryId: text;
   commodityPic: text;
   name: text;
   ticker: text;
 };
type CommodityActor = 
 service {
   AgetAllMarketPricesPaginated: (GetPagesArgs) ->
    (vec record {
           MarketPriceId;
           MarketPrice;
         }) query;
   addCommodity: (CommodityRequest) -> ();
   /// *********************************
   /// ******** MARKET LOCATION ********
   /// *********************************
   addMarketLocation: (MarketLocationRequest) -> ();
   /// *******************************************
   /// ******** MARKET LOCATION AGENTS ***********
   /// *******************************************
   addMarketLocationAgent: (MarketLocationAgentRequest) -> ();
   /// *******************************************
   /// ******** MARKET LOCATION COMMODITY ********
   /// *******************************************
   addMarketLocationCommodity: (MarketLocationCommodityRequest) -> ();
   addMarketPrice: (MarketPriceRequest) -> ();
   deleteCommodity: (Commodity) -> ();
   deleteMarketLocation: (MarketLocation) -> ();
   deleteMarketLocationAgent: (MarketLocationAgent) -> ();
   deleteMarketLocationCommodity: (MarketLocationCommodity) -> ();
   deleteMarketPrice: (MarketPrice) -> ();
   getAllLatestCommodities: () -> (vec Commodity) query;
   getAllLatestMarketCommoditiesByMarketId: (text) ->
    (vec MarketLocationCommodity) query;
   getAllLatestMarketLocationAgents: () -> (vec MarketLocationAgent) query;
   getAllLatestMarketLocationCommodities: () ->
    (vec MarketLocationCommodity) query;
   getAllLatestMarketLocationsByCommodityName: (text) ->
    (vec MarketLocationCommodity) query;
   getAllLatestMarketPrices: () -> (vec MarketPrice) query;
   getAllMarketLocationAgentsByMarketId: (text) ->
    (vec MarketLocationAgent) query;
   getAllMarketLocationsLatest: () -> (vec MarketLocation) query;
   getCommodityByCategory: (text) -> (vec Commodity) query;
   getCommodityLatest: (text) -> (Result_4) query;
   getCommodityStats: () -> (Stats) query;
   getLatestMarketLocationAgentbyId: (text) -> (Result_3) query;
   getLatestMarketPriceById: (text) -> (Result_2) query;
   getLatestMarketPriceByMarketLocationId: (text) -> (vec MarketPrice) query;
   getLatestPriceByMarketLocationId: (text) -> (vec MarketPrice) query;
   getMarketLocationAgentByAgentId: (text) -> (vec MarketLocationAgent) query;
   getMarketLocationByAgentId: (text) -> (vec MarketLocationAgent);
   getMarketLocationByCountryId: (text) -> (vec MarketLocation) query;
   getMarketLocationCommodityByCommodityId: (text) ->
    (vec MarketLocationCommodity) query;
   getMarketLocationCommodityById: (text) -> (Result_1) query;
   getMarketLocationLatest: (text) -> (Result) query;
   getMarketPriceByMarketCommodityId: (text) -> (vec MarketPrice) query;
   getMarketStats: () -> (vec ChartStatsData) query;
   get_total_market_locations: () -> (nat) query;
   get_total_market_prices: () -> (nat) query;
   updateCommodity: (Commodity) -> ();
   updateMarkeLocation: (MarketLocation) -> ();
   updateMarketLocationAgent: (MarketLocationAgent) -> ();
   updateMarketLocationCommodity: (MarketLocationCommodity) -> ();
   updateMarketPrice: (MarketPrice) -> ();
 };
type Commodity = 
 record {
   acCategoryId: text;
   commodityPic: text;
   createdBy: text;
   id: text;
   isDelete: bool;
   name: text;
   ticker: text;
   timeStamp: Time;
 };
type ChartStatsData = 
 record {
   count: nat;
   month: nat;
 };
type CanisterInitArgs = record {env: EnvType;};
service : (CanisterInitArgs) -> CommodityActor
